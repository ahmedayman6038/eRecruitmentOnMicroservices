@typeparam TItem

@if (Items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @if (HeaderTemplate != null)
                {
                    @HeaderTemplate
                    @if (ShowDelete || ShowEdit)
                    {
                        <th>Operations</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    @RowTemplate(item)
                    @if (ShowDelete || ShowEdit)
                    {
                        <td>
                            @if (ShowEdit)
                            {
                                <button class="btn btn-secondary" @onclick="async () => await OnItemEdited.InvokeAsync(item)">Edit</button>
                            }

                            @if (ShowDelete)
                            {
                                <button class="btn btn-danger" @onclick="async () => await OnItemDeleted.InvokeAsync(item)">Delete</button>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }
    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }
    [Parameter]
    public IReadOnlyList<TItem> Items { get; set; }
    [Parameter]
    public EventCallback<TItem> OnItemDeleted { get; set; }
    [Parameter]
    public EventCallback<TItem> OnItemEdited { get; set; }
    [Parameter]
    public bool ShowDelete { get; set; } = true;
    [Parameter]
    public bool ShowEdit { get; set; } = true;
}
