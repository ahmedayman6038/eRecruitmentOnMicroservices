@page "/job"
@inject HttpClient Http
@attribute [Authorize(Roles = "Admin,SuperAdmin")]

<h3>Create</h3>

<EditForm Model="@jobModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <InputText class="form-control" id="name" @bind-Value="jobModel.Name" />
        </div>
    </div>

    <div class="form-group row">
        <label for="description" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
            <InputTextArea class="form-control" id="description" @bind-Value="jobModel.Description" />
        </div>
    </div>

    <div class="form-group row">
        <label for="requirements" class="col-sm-2 col-form-label">Requirements</label>
        <div class="col-sm-10">
            <InputTextArea class="form-control" id="requirements" @bind-Value="jobModel.Requirements" />
        </div>
    </div>

    <div class="form-group row">
        <label for="country" class="col-sm-2 col-form-label">Country</label>
        <div class="col-sm-10">
            <InputSelect class="form-control" id="country" ValueExpression="()=>jobModel.CountryId" Value="@jobModel.CountryId" ValueChanged="(int? value) => OnCountryChanged(value, null)">
                <option value="">Select country...</option>
                @foreach (var item in countries)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group row">
        <label for="city" class="col-sm-2 col-form-label">City</label>
        <div class="col-sm-10">
            <InputSelect class="form-control" id="city" @bind-Value="jobModel.CityId">
                <option value="">Select city...</option>
                @foreach (var item in cities)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>
<br />
<JobsList Jobs="jobs" OnItemDeleted="DeleteHandler" OnItemEdited="EditHandler" />

@code {
    private JobModel jobModel = new JobModel();
    private List<CountryModel> countries = new List<CountryModel>();
    private List<CityModel> cities = new List<CityModel>();
    private List<JobModel> jobs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PagedResponse<List<CountryModel>>>("country");
            if (response.Succeeded)
            {
                countries = response.Data;
            }
            var response2 = await Http.GetFromJsonAsync<PagedResponse<List<JobModel>>>("job");
            if (response2.Succeeded)
            {
                jobs = response2.Data;

            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task OnCountryChanged(int? countryId, int? cityId)
    {
        try
        {
            jobModel.CountryId = countryId;
            var response = await Http.GetFromJsonAsync<PagedResponse<List<CityModel>>>($"city?CountryId={countryId ?? 0}");
            if (response.Succeeded)
            {
                cities = response.Data;
            }
            jobModel.CityId = cityId;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            if(jobModel.Id != 0)
            {
                var responseMessage = await Http.PutAsJsonAsync($"job/{jobModel.Id}", jobModel);
                var response = await responseMessage.Content.ReadAsStringAsync();

                var jobResponse = JsonSerializer.Deserialize<Response<int>>(response, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                if (jobResponse.Succeeded)
                {
                    jobModel.Country = countries.Find(c => c.Id == jobModel.CountryId).Name;
                    jobModel.City = cities.Find(c => c.Id == jobModel.CityId).Name;
                    jobModel = new JobModel();
                    StateHasChanged();
                }
            }
            else
            {
                var responseMessage = await Http.PostAsJsonAsync("job", jobModel);
                var response = await responseMessage.Content.ReadAsStringAsync();

                var jobResponse = JsonSerializer.Deserialize<Response<int>>(response, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                if (jobResponse.Succeeded)
                {
                    jobModel.Id = jobResponse.Data;
                    jobModel.Country = countries.Find(c => c.Id == jobModel.CountryId).Name;
                    jobModel.City = cities.Find(c => c.Id == jobModel.CityId).Name;
                    jobs.Add(jobModel);
                    jobModel = new JobModel();
                    StateHasChanged();
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void DeleteHandler(JobModel job)
    {
        try
        {
            var responseMessage = await Http.DeleteAsync($"job/{job.Id}");
            var response = await responseMessage.Content.ReadAsStringAsync();

            var jobResponse = JsonSerializer.Deserialize<Response<int>>(response, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            if (jobResponse.Succeeded)
            {
                jobs.Remove(job);
                StateHasChanged();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void EditHandler(JobModel job)
    {
        jobModel = job;
        await OnCountryChanged(job.CountryId, job.CityId);
        StateHasChanged();
    }
}
